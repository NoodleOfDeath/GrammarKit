package com.noodleofdeath.pastaparser.io.engine;

import com.noodleofdeath.pastaparser.io.lexer.Lexer;
import com.noodleofdeath.pastaparser.io.parser.Parser;
import com.noodleofdeath.pastaparser.io.token.Token;

/**
 * Specifications for a syntax engine.
 * 
 * @param <R> raw type used by tokens generated by this engine.
 * @param <T> type of token used by this engine.
 * @param <L> type of lexer used by this engine.
 * @param <P> type of parser used by this engine.
 */
public interface SyntaxEngine<R, T extends Token<R>, L extends Lexer<R, T>, P extends Parser<R, T>>
		extends LexerEngine<R, T, L>, ParserEngine<R, T, P> {

	/**
	 * Processes a character sequence by first tokenizing and then parsing it with
	 * suppressed console logging. Alias for <code>process(characterStream, false) </code>.
	 * 
	 * @param characterStream characterStream to process.
	 */
	public default void process(CharSequence characterStream) {
		process(characterStream, false);
	}

	/**
	 * Processes a character sequence by first tokenizing and then parsing it with
	 * conditional verbose output.
	 * 
	 * @param characterStream to process.
	 * @param verbose      <code>true</code> to indicate verbose logging; <code>false</code>,
	 *                     otherwise.
	 */
	public abstract void process(CharSequence characterStream, boolean verbose);

}
