package com.noodleofdeath.pastaparser.io.lexer.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;

import com.noodleofdeath.pastaparser.io.lexer.Lexer;
import com.noodleofdeath.pastaparser.io.token.Token;
import com.noodleofdeath.pastaparser.model.grammar.event.listener.LexerListener;
import com.noodleofdeath.pastaparser.model.grammar.event.listener.impl.BaseGrammarEventGenerator;
import com.noodleofdeath.pastaparser.model.grammar.Grammar;

/** @param <R> */
public abstract class AbstractLexer<R, T extends Token<R>> extends BaseGrammarEventGenerator<LexerListener<R, T>>
		implements Lexer<R, T> {

	/** Lexer grammar of this lexer. */
	protected Grammar grammar;

	/** Scope map generated by this lexer. */
	protected HashMap<String, Integer> scopeMap = new LinkedHashMap<>();

	/** Unmatched atoms encountered while tokenizing a character stream. */
	protected List<T> unmatchedAtoms = new ArrayList<>();

	/**  */
	public AbstractLexer() {

	}

	/**
	 *
	 * @param grammar
	 */
	public AbstractLexer(Grammar grammar) {
		this.grammar = grammar;
	}

	/**
	 *
	 * @param Grammar
	 * @param listener
	 */
	public AbstractLexer(Grammar grammar, LexerListener<R, T> listener) {
		this.grammar = grammar;
		addGrammarEventListener(listener);
	}

	@Override
	public Grammar grammar() {
		return grammar;
	}

	@Override
	public void setGrammar(Grammar grammar) {
		this.grammar = grammar;
	}

	@Override
	public List<T> unmatchedAtoms() {
		return unmatchedAtoms;
	}

	@Override
	public boolean addUnmatchedAtom(T atom) {
		return unmatchedAtoms.add(atom);
	}

}
