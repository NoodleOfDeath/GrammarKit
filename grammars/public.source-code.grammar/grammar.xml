<?xml version="1.0" encoding="UTF-8" ?>
<grammar id="public.source-code" format-version="1.0" version="1.0">
	
	<rules>
	
		<!-- Lexer Rules -->

		<!-- Whitespaces -->
		<rule id="WHITESPACE" precedence="max" options="skip">
			<definition>'[ \t]+'</definition>
		</rule>
		<rule id="NEWLINE" precedence="=WHITESPACE" options="skip">
			<definition>'\r?\n'</definition>
		</rule>

		<!-- Code Blocks -->
		<rule id="BLOCK" precedence="=WHITESPACE" options="multiline,nested">
			<definition>L_BRACE (BLOCK | ~R_BRACE)* (R_BRACE | '\Z')</definition>
			<metadata>
				<directive>
					<sequence>subrange (1, length -1), rescan</sequence>
				</directive>
			</metadata>
		</rule>

		<!-- Strings -->
		<rule id="STRING" precedence="&lt;WHITESPACE" options="">
			<definition>'\"(?s:.*?)(\"|\Z)'</definition>
		</rule>
		<rule id="LITERAL_STRING" precedence="=STRING" options="">
			<definition>'\'(?s:.*?)(\'|\Z)'</definition>
		</rule>

		<!-- Token Precedence -->
		<rule id="TOKEN" precedence="&lt;STRING" options="skip"></rule>

		<!-- Block Delimiters -->
		<rule id="L_BRACE" precedence="=TOKEN" options="">
			<definition>'\{'</definition>
		</rule>
		<rule id="R_BRACE" precedence="=TOKEN" options="">
			<definition>'\}'</definition>
		</rule>
		<rule id="L_BRACKET" precedence="=TOKEN" options="">
			<definition>'\['</definition>
		</rule>
		<rule id="R_BRACKET" precedence="=TOKEN" options="">
			<definition>'\]'</definition>
		</rule>
		<rule id="L_PAREN" precedence="=TOKEN" options="">
			<definition>'\('</definition>
		</rule>
		<rule id="R_PAREN" precedence="=TOKEN" options="">
			<definition>'\)'</definition>
		</rule>

		<!-- Delimiter Tokens -->
		<rule id="COMMA" precedence="=TOKEN" options="">
			<definition>','</definition>
		</rule>
		<rule id="LINE_DELIMETER" precedence="=TOKEN" options="">
			<definition>';'</definition>
		</rule>
		<rule id="COLON_DELIMETER" precedence="=TOKEN" options="">
			<definition>':'</definition>
		</rule>

		<!-- Token Precedence -->
		<rule id="OPERATOR" precedence="&lt;STRING" options="skip"></rule>

		<!-- Bitwise and Logic Operators -->
		<rule id="LOGIC_OPERATOR" precedence="=OPERATOR" options="">
			<definition>'&amp;&amp;' | '\|\|'</definition>
		</rule>
		<rule id="BITWISE_OPERATOR" precedence="&lt;LOGIC_OPERATOR,&gt;LT_OPERATOR,&gt;GT_OPERATOR" options="">
			<definition>'&lt;&lt;' | '&gt;&gt;' | '~' | '&amp;' | '\|'</definition>
		</rule>

		<!-- Comparison Operators -->
		<rule id="EQ_OPERATOR" precedence="=OPERATOR" options="">
			<definition>'=='</definition>
		</rule>
		<rule id="NEQ_OPERATOR" precedence="=OPERATOR" options="">
			<definition>'!='</definition>
		</rule>
		<rule id="LT_OPERATOR" precedence="=OPERATOR" options="">
			<definition>'&lt;'</definition>
		</rule>
		<rule id="GT_OPERATOR" precedence="=OPERATOR" options="">
			<definition>'&gt;'</definition>
		</rule>

		<!-- Mathematical Operators -->
		<rule id="ADD_OPERATOR" precedence="=OPERATOR" options="">
			<definition>'\+'</definition>
		</rule>
		<rule id="SUB_OPERATOR" precedence="=OPERATOR" options="">
			<definition>'-'</definition>
		</rule>
		<rule id="MULT_OPERATOR" precedence="=OPERATOR" options="">
			<definition>'\*'</definition>
		</rule>
		<rule id="DIV_OPERATOR" precedence="=OPERATOR" options="">
			<definition>'/'</definition>
		</rule>

		<!-- Assignment Operators -->
		<rule id="EQ_ASSIGNMENT_OPERATOR" precedence="&lt;EQ_OPERATOR,&gt;NUMBER" options="">
			<definition>'='</definition>
		</rule>
		<rule id="INCREMENTAL_ASSIGNMENT_OPERATOR" precedence="=OPERATOR,&gt;ADD_OPERATOR,&gt;SUB_OPERATOR,&gt;MULT_OPERATOR,&gt;DIV_OPERATOR" options="">
			<definition>'\+=' | '-=' | '\*=' | '/='</definition>
		</rule>

		<!-- Numbers -->
		<rule id="NUMBER" precedence="&lt;OPERATOR,&lt;TOKEN" options="">
			<definition>'0x[0-9a-fA-F][0-9a-fA-F]+' | ('[0-9]+' ('\.[0-9]+')?)</definition>
		</rule>

		<rule id="ID" precedence="&lt;NUMBER" options="">
			<definition>'[\p{L}\_\$][\p{L}\_\$0-9]*'</definition>
		</rule>

		<!-- Lexer Rules -->

		<rule id="math_operator" options="fragment">
			<definition></definition>	
		</rule>

		<rule id="logic_operator" options="fragment">
			<definition></definition>
		</rule>

		<!-- Lexer Fragments -->
		<rule id="operator" options="fragment">
			<definition>BITWISE_OPERATOR | LOGIC_OPERATOR | LT_OPERATOR | GT_OPERATOR | EQ_OPERATOR | ADD_OPERATOR | SUB_OPERATOR | MULT_OPERATOR | DIV_OPERATOR | INCREMENTAL_ASSIGNMENT_OPERATOR</definition>
		</rule>
		
	</rules>

</grammar>
