
# --------------------------------------------------
# Structural Patterns
# --------------------------------------------------

grammar = grammar\s+((?:[\\];|[^;])*?)\s*?;

import = import\s+((?:[\\];|[^;])*?)\s*?;

rule = ^(?=\s*)(?:(fragment)\s+)?(\w+)\s*(\{.*?\})?\s*(?::\s*((?:[\\];|[^;])*?))?\s*;

# --------------------------------------------------
# Rule Components
# --------------------------------------------------

empty = (?:\s*;\s*)

literal = (?<!\\)'(?:\\'|[^'])*'(?:\s*(?:\.\.)(?<!\\)'(?:\\'|[^'])*')?

expression = (?:\s*\^?(?:\[.*?\]|\(\?\!.*\)|\.)\$?)

word = (?:[_\p{L}]+)

group = (?:\s*(?:[~])?\(.*\s*)

groupReference = (?:%\w+)

atom = (?:\(empty)|\(literal)|\(expression)|\(word)|\(group)|\(groupReference))

quantifier = (?:[\*\+\?]\??|\{\s*\d\s*(?:,\d)?\}|\{,\d\})

# --------------------------------------------------
# Capture Groups
# --------------------------------------------------

cgAlternative = ((?:([~])?\(atom)\s*\(quantifier)?\s*)+)

cgGroup = \s*([~])?(\(.*)\s*

cgGroupName = (?:\?\s*<(\w+)>\s*)

cgGreedyGroup = ([~])?\((.*)\)

cgGroupReference = %(\w+)

cgLiteral = \s*(?<!\\)'((?:\\'|[^'])*)'(?:\s*(?:\.\.)(?<!\\)'((?:\\'|[^'])*)')?\s*

cgExpression = \s*(\(expression))\s*

cgAtom = ([~])?\s*(\(atom))\s*(\(quantifier)?)
